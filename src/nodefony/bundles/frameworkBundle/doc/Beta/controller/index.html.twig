<div class="page-header">
  <h1><strong>CONTROLLERS</strong> </h1>
	<div class="alert alert-info" role="alert">
		<strong>
		CONTROLLERS Nodefony  </br> 
		</strong>
	</div>

</div>

<h2 > You can see here :</h2>

<p>
	<ul>
		<li><a href="#location">Location controllers</a></li>
		<li><a href="#file">File Controller</a></li>
		<li><a href="#action">Controller Actions</a></li>
		<li><a href="#context">Request Context</a></li>
		<li><a href="#service">Services Container</a></li>
		<li><a href="#requestResponse">Request and Response</a></li>
		<li><a href="#data">Rendering Datas</a></li>
		<li><a href="#logger">Controller Logger</a></li>
		<li>
			<a href="#examples">Examples</a>
			<ul>
				<li><a href="#rawRender">Simple Render html</a></li>
				<li><a href="#simpleTemplate">Simple Render Template</a></li>
				<li><a href="#asyncTemplate">Asynchrone Render Template</a></li>
				<li><a href="#websocket">Websocket</a></li>
				<li><a href="#renderJson">Rendering JSON</a></li>
				<li><a href="#download"> Rendering File Download</a></li>
				<li><a href="#upload"> File Upload</a></li>
				<li><a href="#mediaStream">Rendering Media Stream</a></li>
				<li><a href="#redirect">Redirecting</a></li>
				<li><a href="#forward">Forwarding</a></li>
				<li><a href="#generateUrl">Generating URL</a></li>
			</ul>
		</li>
	</ul>
<p>



<h2 name="location" id="location">Location controllers  :</h2>

<div class="doc2">
	<p>
		You can find or add controllers in bundle repository under <code>controller</code> directory.

	</p>

	<pre>
$ ls -l src/bundles/nameBundle/

total 24
drwxr-xr-x  2 cci  staff    68 20 jui 11:07 Command
drwxr-xr-x  2 cci  staff    68 20 jui 11:07 Entity
drwxr-xr-x  6 cci  staff   204 22 jui 13:57 Resources
drwxr-xr-x  4 cci  staff   136  6 oct 11:17 <strong>controller</strong>
drwxr-xr-x  2 cci  staff    68 20 jui 11:07 core
drwxr-xr-x  5 cci  staff   170 22 sep 14:23 doc
-rwxr-xr-x  1 cci  staff  1751 22 sep 10:56 nameBundle.js
-rwxr-xr-x  1 cci  staff   195 22 sep 10:56 package.json
-rwxr-xr-x  1 cci  staff   706 22 sep 10:56 readme.md
drwxr-xr-x  2 cci  staff    68 20 jui 11:07 services

	</pre>
</div>


<h2 name="file" id="file"> File Controller   :<h2>
<h3>File Controller  :</h3>
<div class="doc3 ">

<p>
	The name of file must finish by <strong>'...Controller.js'</strong>  example : <code> name<strong>Controller.js</strong></code>
</p>

	<pre>
$ ls -l src/bundles/nameBundle/controller

total 32
-rwxr-xr-x  1 cci  staff  8210  6 oct 10:58 defaultController.js
-rw-r--r--  1 cci  staff  2521 29 sep 14:44 gitController.js
	</pre>


</div>

<h3>Autoloader  :</h3>
<div class="doc3 ">

<p>
	The core autoloader nodefony load all files in this directory which match with <strong>'...Controller.js'</strong> <br>
</p>


</div>

<h3>Interpreter  :</h3>
<div class="doc3 ">

<p>
	The core autoloader nodefony interpret the javascript code in an extended global context.<br>
	You can find namespace nodefony in the global context .
</p>


</div>


<h3>Class Controller  :</h3>
<div class="doc3 ">

<p>
	Nodefony core has a method <strong>registerController</strong> which must return class as a  Closure. <br>
	The returned class is auto extending by nodefony core. 	
</p>


	<pre>
nodefony.<strong>registerController</strong>("name", function(){

		/*
		 *	closure private space 
		 */
		var tab = [1,2,3,4];
		var myFuntion = function(){
			return tab ;
		}
		
		/*
		 *	Class controller name
		 *	constructor 
		 */ 
		var <strong>myController</strong> = function(container, context){
			this.mother = this.$super;
			this.mother.constructor(container, context);
		};
		
		/*
		 *	Action controller
		 *	( action render public with object prototype ) 
		 *
		 */
		<strong>myController</strong>.prototype.indexAction = function(){
			var kernel = this.get("kernel") ;
			var settings = kernel.settings ;
			var html = '&lt;html&gt;&lt;body&gt;Nodefony version : '+settings.system.version+'&lt;/body&gt;&lt;/html&gt;';
			return this.renderResponse(html);
		};

		// RETURN  class
		return <strong>myController;</strong>
});
	</pre>

</div>

<h2 name="action" id="action">Controller Actions  :</h2>

<div class="doc2 ">
	<p>
		The nodefony core router find routes with pattern <code>'nameBundle:controller:<strong>action</strong>'</code> Example : demoBundle:default:index <br> 
		For the router find the controller's action functions.  <br>    
		The name of function must finish  by '...Action' <code>'indexAction'</code>
	</p>	
	<pre>
/*
 *	Action index in controller default  
 *
 */
defaultController.prototype.index<strong>Action</strong> = function(){
	...
};
	
	</pre>
	
</div>


<h2 name="context" id="context">Request Context  :</h2>
<div class="doc2 ">

<p>
	In controller the actions can have  two execution contexts. <br>
	When a request comes,  the nodefony core instantiates a request context ( http or websocket )
	 
</p>
<pre>
/*
 *	 Detect  request context
 *
 */
defaultController.prototype.indexAction = function(){

	// two methods to detect the request context

	// FIRST with getContext
	<strong>var context = this.getContext();</strong>
	switch( context.type ){
		<strong>case "HTTP" :</strong>
			// HTTP CONTEXT
		break;
		<strong>case "HTTPS" :</strong>
			// HTTP CONTEXT
		break;
		<strong>case "WEBSOCKET" :</strong>
			// WEBSOCKET CONTEXT
		break;
		<strong>case "WEBSOCKET SECURE" :</strong>
			// WEBSOCKET CONTEXT
		break;
		default :
			throw new Error(" METHOD NOT ALLOWED")
	}

	// SECOND with getMethod 
	<strong>var method = this.getMethod();</strong>
	switch( method ){
		<strong>case "GET" :</strong>
			// HTTP CONTEXT
		break;
		<strong>case "POST" :</strong>
			// HTTP CONTEXT
		break;
		<strong>case "DELETE" :</strong>
			// HTTP CONTEXT
		break;
		<strong>case "WEBSOCKET" :</strong>
			// WEBSOCKET CONTEXT
		break;
		default :
			throw new Error(" Bad Context")
	}
};

</pre>
</div>



<h3>  CONTEXT  <a>HTTP / HTTPS   :</a></h3>
<div class="doc3 ">

	<p>
 	
	</p>

	<pre>
//  DUMP HTTPS CONTEXT

var context = this.getContext();
console.log(context);

<strong>Http {</strong>
  type: 'HTTPS',
  container: [Object],
  notificationsCenter: [Object],
  resolver: [Object],
  request: [Object],
  response: [Object],
  session: [Object],
  sessionService: [Object],
  sessionAutoStart: 'firewall',
  cookies: [Object],
  isAjax: false,
  secureArea: null,
  showDebugBar: true,
  kernel: [Object],
  autoloadCache: [Object],
  kernelHttp: [Object],
  domain: 'nodefony.com',
  validDomain: true,
  security: [Object],
  user: [Object],
  url: 'https://nodefony.com:5152/demo/json',
  remoteAddress: '192.168.100.71',
  extendTwig: [Object],
  profiling: [Object] 
<strong>}</strong>
	</pre>


</div>

<h3> CONTEXT  <a>WEBSOCKET / WEBSOCKET SECURE </a> :</h3>
<div class="doc3 ">

	<p>
 	
	</p>
	<pre>
// DUMP WEBSOCKET SECURE CONTEXT

var context = this.getContext();
console.log(context);

<strong>websocket {</strong>
  type: 'WEBSOCKET SECURE',
  container: [Object],
  kernel: [Object],
  autoloadCache: [Object],
  kernelHttp: [Object],
  request: [Object],
  origin: 'https://nodefony.com:5152',
  connection: [Object],
  response: [Object],
  originUrl: [Object],
  secureArea: null,
  cookies: [Object],
  domain: 'nodefony.com',
  validDomain: true,
  session: [Object],
  sessionService: [Object],
  sessionAutoStart: 'firewall',
  security: [Object],
  user: [Object],
  url: '/demo/websoket',
  remoteAdress: '192.168.100.71',
  resolver: [Object],
  notificationsCenter: [Object],
  extendTwig: [Object],
  profiling: [Object] 
<strong>}</strong>
	</pre>
</div>


<h2 name="service" id="service">Services Container  : </h2>
<div class="doc2 ">
	<p>
		<div class="alert alert-warning" role="alert">
		Nodefony Context Request clone the Kernel Service Container ( scope ) </br>
		</div>
		You can find all services in controller container  </br>
		The Base controller give this.get() & this.set() to manage services container  </br>
	</p>
</div>


<h3  >Get Services  :</h3>
<div class="doc3 ">

<p>
</p>

	<pre>
	// GET SETTINGS services HTTPS SERVER
	var settingsHttps =  <strong>this.get</strong>("httpsServer").settings ;

	// GET I18n services 
	var translateService = <strong>this.get</strong>("translation");

	// GET sessions services 
	var sessionsService = <strong>this.get</strong>("sessions");
	</pre>

</div>

<h3  >Get Parameters  :</h3>
<div class="doc3 ">

<p>
</p>

	<pre>
	// get  asseticBundle globals settings
	this.getParameters("bundles.assetic")

	// LOG  
	{ 
		name: 'asseticBundle',
		locale: 'en_en',
		version: '1.0',
		less: { optimization: 0, compress: true, cache: true, async: false },
		coffescript: null,
		CDN: { stylesheets: null, javascripts: null } 
	}
	
	</pre>

</div>


<h2 name="requestResponse" id="requestResponse">Request and Response :</h2>
<div class="doc2 ">

<p>
</p>

</div>

<h3> Request :</h3>
<div class="doc3 ">

	<p>
 	
	</p>

	<pre>
//  DUMP Request 

var resquest = this.getRequest();
console.log(resquest);

<strong>Request {</strong>
  container: [Object],
  request: [Object],
  headers: [Object],
  host: 'nodefony.com:5152',
  hostname: 'nodefony.com',
  sUrl: 'https://nodefony.com:5152/demo/json',
  url: [Object],
  queryPost: {},
  queryFile: {},
  queryGet: {},
  query: {},
  method: 'GET',
  rawContentType: {},
  contentType: null,
  charset: 'utf8',
  domain: 'nodefony.com',
  remoteAdress: '192.168.100.71',
  data: [],
  dataSize: 0,
  body: &lt;Buffer&gt;
<strong>}</strong>
	</pre>


</div>


<h3> Get Request Parameters </h3>

<div class="doc4">
	
	<p>
	</p>
<h4>Query String :</h4>
	<pre>
	// Get query string from container service : 
	var queryString  = this.getParameters("query.get");

	// Get query string from Class request 
	var request = this.getRequest();
	var queryString = request.queryGet ;
	</pre>
<h4>Post Data :</h4>
	<pre>
	// Get Post data from container service :
	var post = this.getParameters("query.post");

	// Get Post Data from Class request
	var request = this.getRequest();
	var postData = request.queryPost ;
	</pre>
<h4>Files Data : ( upload )</h4> 
	<pre>
	// Get Files data from container service :
	var queryFile = this.getParameters("query.files");

	// Get Files data  from Class request
	var request = this.getRequest();
	var queryFile = request.queryFile ;
	</pre>
<h4>Query Data :</h4>
	<pre>
	// Get query  from container service :
	// query is extend object with all request datas (get, post, files)
	var query = this.getParameters("query.request");

	// Get query  from Class request
	var request = this.getRequest();
	var query = request.query ;
	</pre>
<h4>Request Body  :</h4>
	<pre>
	// Get body from Class Request 
	var request = this.getRequest();
	var body = request.body ;
	</pre>

<h4>Request Cookies  :</h4>
	<div class="alert alert-warning" role="alert">
		You can find Cookies in context !!!  
	</div>
	<pre>
	var context = this.getContext();
	var cookies = context.cookies ;
	</pre>

</div>


<h3>  Response :</h3>
<div class="doc3 ">

	<p>
 	
	</p>
	<pre>
// DUMP Response 

var response = this.getResponse();
console.log(response);

<strong>Response {</strong>
  container: [Object],
  kernel: [Object],
  response: [Object],
  body: '',
  encoding: 'utf8',
  cookies: {},
  headers: {},
  ended: false,
  statusCode: 200,
  timeout: 40000 
<strong>}</strong>
	</pre>
</div>

<h3>Set Response Parameters</h3>

<div class="doc4">
	
	<p>
	</p>
<h4>Response Set Timeout :</h4>
	<pre>
	// response Timeout  when the time is up the framework makes the 408 response  
	this.getResponse().<strong>setTimeout</strong>(5000)
	</pre>
<h4>Response Set Headers :</h4>
	<pre>

	// with setHeader	
	this.getResponse().<strong>setHeader</strong>("Content-Type", "text/html; charset=utf-8");

	//or with setHeaders
	this.getResponse().<strong>setHeaders</strong>({
		"Content-Type" :"text/html; charset=utf-8"	
	})
	</pre>
<h4>Response Set StatusCode :</h4>
	<pre>

	//
	this.getResponse().<strong>setStatusCode</strong>(200, "OK") ;
	</pre>


<h4>Response Add cookies :</h4>
	<pre>

	var cookieDefaultSettings = {
		maxAge:24*60*60,
		path:"/",
		domain:null,
		secure:false,
		httpOnly:true,
	};

	var cookie = new nodefony.cookies.cookie("COOKIE NAME", "cookie value" , cookieDefaultSettings);
	this.getResponse().<strong>addCookie</strong>(cookie);

	</pre>


</div>



<h2 name="data" id="data">Rendering Datas :</h2>
<div class="doc2 ">
<p> 
		 There are 2 different ways to render datas (templates)  in the actions of the controllers in HTTP context    
</p>
</div>
<h3>Synchronous rendering  :</h3>
<div class="doc3 ">

	<p>
		The actions functions must return a Response Class or an object <br>

		The controller give somme tools to render data : 
		<ul>
			<li> renderResponse </li>
			<li> render </li>
			<li> renderJson </li>
		</ul>
	
	</p>

	<pre>
/*
 *	RENDER RAW DATA
 */
defaultController.prototype.indexAction = function(){
	var kernel = this.get("kernel") ;
	var settings = kernel.settings ;
	var html = '&lt;html&gt;&lt;body&gt;Nodefony version : '+settings.system.version+'&lt;/body&gt;&lt;/html&gt;';
	<strong>return this.renderResponse(html);</strong>
};
	</pre>


	<pre>
/*
 *	RENDER TEMPLATE 
 */
defaultController.prototype.indexAction = function(){
	var kernel = this.get("kernel") ;
	<strong>return this.render("demoBundle:Default:index.html.twig",{
		settings:kernel.settings	
	});</strong>
	
};
	</pre>

	<pre>
/*
 *	RENDER TEMPLATE AUTO
 */
defaultController.prototype.indexAction = function(){
	var kernel = this.get("kernel") ;
	<strong>return {
		settings:kernel.settings	
	}</strong>
};
	</pre>


</div>

<h3> Asynchronous rendering  :</h3>
<div class="doc3 ">

	<p>

	For Asynchronous rendering the action must not return value <br>	
	The controller give somme tools to render data : 
		<ul>
			<li> renderResponse </li>
			<li> renderAsync </li>
			<li> renderJsonAsync </li>
		</ul>
	The  framework  wait an event of other entity of framework ( orm database , syscall )
	<div class="alert alert-warning" role="alert">
		For Asynchrone data rendering ,  The controller's Action  function must not return a value 
	</div>

	</p>
	<pre>
/*
 *	RENDER RAW DATA
 */
defaultController.prototype.rawResponseAsyncAction= function(){
	var kernel = this.get("kernel") ;
	var settings = kernel.settings ;

	// SYSCALL async 
	var childHost =  <strong>exec</strong>('hostname', function(error, stdout, stderr){
		var hostname = stdout ;	

		var content = '&lt;xml&gt;'&lt;nodefony&gt;\
			'&lt;kernel name="'+settings.name+'" version="'+settings.system.version+'"&gt;\
			'&lt;server type="HTTP" port="'+settings.system.httpPort+'"&gt;'&lt;/server&gt;\
			'&lt;server type="HTTPS" port="'+settings.system.httpsPort+'"&gt;'&lt;/server&gt;\
			'&lt;hostname&gt;'+hostname+'</hostname>\
			'&lt;/kernel&gt;\
			'&lt;/nodefony&gt;'&lt;/xml&gt;';

		return <strong>this.renderResponse</strong>(content, 200 , {
			"content-type" :"Application/xml"
		})
	}.bind(this));

	<strong>return null;</strong>
};

	</pre>
</div>







<h2 name="logger" id="logger">Controller Logger  :</h2>
<div class="doc2 ">
	<pre>
myController.prototype.indexAction = function(){
	var kernel = this.get("kernel") ;
	var settings = kernel.settings ;
	<strong>this.logger( "Nodefony version : Alpha" , "INFO");</strong>
	var html = '&lt;html&gt;&lt;body&gt;Nodefony version : '+settings.system.version+'&lt;/body&gt;&lt;/html&gt;';
	return this.renderResponse(html);
};

// IN TERMINAL 

Thu Oct 06 2016 15:49:10 <strong>INFO CONTROLER demo</strong>   : Nodefony version : Alpha

	</pre>
</div>




<h2 name="examples" id="examples">Examples  :</h2>
<div class="doc2 ">

<p>
	Example of controller actions to different use cases : 
	<ul>
		<li><a href="#rawRender">Simple Render html</a></li>
		<li><a href="#simpleTemplate">Simple Render Template</a></li>
		<li><a href="#asyncTemplate">Asynchrone Render Template</a></li>
		<li><a href="#websocket">Websocket</a></li>
		<li><a href="#renderJson">Rendering JSON</a></li>
		<li><a href="#download"> Rendering File Download</a></li>
		<li><a href="#upload"> File Upload</a></li>
		<li><a href="#mediaStream">Rendering Media Stream</a></li>
		<li><a href="#redirect">Redirecting</a></li>
		<li><a href="#forward">Forwarding</a></li>
		<li><a href="#generateUrl">Generating URL</a></li>
	</ul>	
</p>

</div>


<h3 name="rawRender" id="rawRender" >Rendering html  :</h3>
<div class="doc3 ">

<p>
</p>

	<pre>
demoController.prototype.htmlAction= function(name){
	var name = "nodefony";
	return this.renderResponse('&lt;html&gt;&lt;script&gt;console.log("'+name+'")&lt;/script&gt;&lt;/html&gt;');
};

	</pre>

</div>


<h3 name="simpleTemplate" id="simpleTemplate" >Rendering Templates :</h3>
<div class="doc3 ">

<p>
</p>

	<pre>
demoController.prototype.indexAction= function(){
	var kernel = this.get("kernel") ;
	return <strong>this.render</strong>("demoBundle:Default:index.html.twig",{
		title:"nodefony",
		user: this.context.user,
		nodefony:kernel.settings.name + " " + kernel.settings.system.version
	});
};
	</pre>
</div>




<h3 name="asyncTemplate" id="asyncTemplate">Asynchrone Rendering Templates :</h3>
<div class="doc3 ">

<p>
	Example Asynchrone Rendering database query with Promise 
	<div class="alert alert-warning" role="alert">
		For Asynchrone data rendering ,  The controller's Action  function must not return a value 
	</div>
</p>

	<pre>
demoController.prototype.querySqlJoinAction = function(){

	var orm = this.getORM() ;

	var nodefonyDb = orm.getConnection("nodefony") ;

	nodefonyDb.query('SELECT * FROM sessions S LEFT JOIN users U on U.id = S.user_id ')
	.then(function(result){
		var joins = result[0];
		for (var i = 0 ; i < joins.length ; i++){
			joins[i].metaBag = JSON.parse( joins[i].metaBag )
		}
		return joins ;
	}.bind(this))
	.done(function(data){
		<strong>this.renderAsync</strong>('demoBundle:orm:orm.html.twig', {
			joins:data,
		});
	}.bind(this))
}
	</pre>

</div>

<h3 name="websocket" id="websocket" >Rendering Websocket  :</h3>
<div class="doc3 ">

<p>
	Controller Action can manage WEBSOCKET Request 


	<div class="alert alert-warning" role="alert">
		To use websocket you must understand Nodefony Request Context  
	</div>
</p>

	<pre>
demoController.prototype.websoketAction= function(message){
	<strong>var context = this.getContext();</strong>
	switch( this.getMethod() ){
		case "GET" :
			return this.render('demoBundle:Default:websocket.html.twig',{name:"websoket"});
		break;
		<strong>case "WEBSOCKET" :</strong>
			if (message){
				// LOG  MESSAGE CLIENT IN TERMINAL
				this.logger( message.utf8Data , "INFO");
			}else{
				// PREPARE  PUSH MESSAGES SERVER 
				// SEND MESSAGES TO CLIENTS
				var i = 0 ;
				var id = setInterval(function(){
					var mess = "I am a  message "+ i +"\n" ;
					<strong>context.send(mess);</strong>
					// LOG  MESSAGE SENDING IN TERMINAL
					this.logger( "SEND TO CLIENT :" + mess , "INFO");
					i++
				}.bind(this), 1000);

				setTimeout(function(){
					clearInterval(id);
					// close reason , descripton
					<strong>context.close(1000, "NODEFONY CONTROLLER CLOSE SOCKET");</strong>
					id = null ;
				}, 10000);
				// Event websocket close by client
				<strong>this.context.listen</strong>(this, "onClose" , function(){
					if (id){
						clearInterval(id);	
					}
				})
			}
		break;
		default :
			throw new Error(" METHOD NOT ALLOWED")
	}
};

<strong>/* YOU CAN SHOW LOG IN TERMINAL */</strong>

Thu Oct 06 2016 15:49:09 INFO REQUEST WEBSOCKET SECURE  :  Connection Websocket Connection from : 192.168.100.71 PID :86607 ORIGIN : https://nodefony.com:5152
Thu Oct 06 2016 15:49:09 INFO CONTROLER demo   :  HELLO SERVER I AM A CLIENT : Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2879.0 Safari/537.36

Thu Oct 06 2016 15:49:10 INFO CONTROLER demo   : SEND TO CLIENT :I am a  message 0
Thu Oct 06 2016 15:49:11 INFO CONTROLER demo   : SEND TO CLIENT :I am a  message 1
Thu Oct 06 2016 15:49:12 INFO CONTROLER demo   : SEND TO CLIENT :I am a  message 2
Thu Oct 06 2016 15:49:13 INFO CONTROLER demo   : SEND TO CLIENT :I am a  message 3
Thu Oct 06 2016 15:49:14 INFO CONTROLER demo   : SEND TO CLIENT :I am a  message 4
Thu Oct 06 2016 15:49:15 INFO CONTROLER demo   : SEND TO CLIENT :I am a  message 5
Thu Oct 06 2016 15:49:16 INFO CONTROLER demo   : SEND TO CLIENT :I am a  message 6
Thu Oct 06 2016 15:49:17 INFO CONTROLER demo   : SEND TO CLIENT :I am a  message 7
Thu Oct 06 2016 15:49:18 INFO CONTROLER demo   : SEND TO CLIENT :I am a  message 8

Thu Oct 06 2016 15:49:19 INFO REQUEST WEBSOCKET SECURE  : Thu Oct 06 2016 15:49:19 GMT+0200 (CEST) Connection Websocket CLOSE : 192.168.100.71 PID :86607 ORIGIN : https://nodefony.com:5152 1000 NODEFONY CONTROLLER CLOSE SOCKET
	</pre>

</div>



<h3 name="renderJson" id="renderJson">Rendering JSON  :</h3>
<div class="doc3 ">

<p>
</p>

	<pre>
demoController.prototype.jsonAction= function(){
	return <strong>this.renderJson</strong>({
		foo:"bar",
		bar:"foo"
	});
};
	</pre>

</div>


<h3 name="download" id="download">Download File   :</h3>
<div class="doc3 ">

<p>
</p>

	<pre>
demoController.prototype.downloadAction = function(){

	var kernel = this.get('kernel') ;

	var filePath = kernel.rootDir + '/README.md';
	return <strong>this.renderFileDownload</strong>(filePath); 
};

	</pre>

</div>



<h3 name="mediaStream" id="mediaStream">Media Stream Rendering   :</h3>
<div class="doc3 ">

<p>
</p>

	<pre>
demoController.prototype.mediaStreamAction = function(){

	var kernel = this.get('kernel') ;

	var filePath = kernel.rootDir + '/app/Resources/medias/myAudio.mp3';
	var file = new nodefony.fileClass(filePath);
	
	return <strong>this.renderMediaStream</strong>(file); 
};

	</pre>

</div>






<h3 name="upload" id="upload">Upload File   :</h3>
<div class="doc3 ">

<p>
</p>

	<pre>
demoController.prototype.uploadAction = function(){
	
	var files = this.<strong>getParameters</strong>("query.files");
	var path =  this.get("kernel").rootDir+"/src/bundles/demoBundle/Resources/images" ;	
	for (var file in files){
		if( files[file].error ){
			throw files[file].error ;
		}
		files[file].<strong>move</strong>(path);
		//console.log( files[file].getExtention() )
		//console.log( files[file].getMimeType() )
		//console.log( files[file].realName() )
	}
	if ( ! this.isAjax() ){
		//return this.forward("demoBundle:finder:index");
		return this.redirect ( this.generateUrl("finder") );
	}else{
		var res = {
			"files": [],
			"metas": []
		}
		for (var file in files){
			var name = files[file].realName();
			res.files.push(path+"/"+name);
			var meta = {
				date : new Date(),
				extention:files[file].getExtention(),
				file:path+"/"+name,
				name:name,
				old_name:files[file].name,
				size:files[file].stats.size,
				size2:files[file].stats.size,
				type:files[file].getMimeType().split("/")
			}
			res.metas.push(meta);
		}

		return this.renderResponse(
			JSON.stringify(res), 
			200, 
			{'Content-Type': 'application/json; charset=utf-8'}
		);
	}
};
	</pre>

</div>






<h3>Redirecting and Forwarding :</h3>
<div class="doc3 ">

<p>
</p>

</div>


<h4 name="redirect" id="redirect"> Redirecting </h4>
<div class="doc4">
	<pre>
demoController.prototype.redirectGoogleAction= function(){
	// status 301 or 302
	return <strong>this.redirect</strong>("http://google.com");
};
	</pre>

</div>


<h4 name="forward" id="forward"> Forwarding </h4>
<div class="doc4">
	<pre>

demoController.prototype.docAction = function(){
	var docBundle = this.get("kernel").getBundles("documentation"); 
	if (  docBundle ){
		return <strong>this.forward</strong>("documentationBundle:default:navDoc");
	}
	return this.render('demoBundle:Default:navDoc.html.twig');	
}


	</pre>

</div>




<h3 name="generateUrl" id="generateUrl">Generating URL  :</h3>
<div class="doc3 ">

<p>
</p>

	<pre>

demoController.prototype.generateUrlAction = function(){
	// absolute
	return this.redirect ( <strong>this.generateUrl</strong>("user", {name:"cci"},true) );	

	// relative
	return this.redirect ( <strong>this.generateUrl</strong>("user", {name:"cci"} );
};


	</pre>

</div>





